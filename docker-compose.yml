version: "3.9"

services:
  postgres_db:
    image: postgres:15-alpine
    container_name: portfolio_postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth_service:
    build: ./backend/AuthService
    container_name: auth_service
    restart: always
    depends_on:
      postgres_db:
        condition: service_healthy
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres_db;Database=auth_db;Username=postgres;Password=${POSTGRES_PASSWORD}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=AuthService
      - Jwt__Audience=BillingService
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s # <-- CORREÇÃO: Aumentamos o intervalo
      timeout: 10s  # <-- CORREÇÃO: Adicionamos timeout
      retries: 5    # <-- CORREÇÃO: Adicionamos retries
      start_period: 30s # <-- CORREÇÃO: Adicionamos start_period

  billing_service:
    build: ./backend/BillingService
    container_name: billing_service
    restart: always
    depends_on:
      postgres_db:
        condition: service_healthy
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres_db;Database=billing_db;Username=postgres;Password=${POSTGRES_PASSWORD}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=AuthService
      - Jwt__Audience=BillingService
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s # <-- CORREÇÃO: Aumentamos o intervalo
      timeout: 10s  # <-- CORREÇÃO: Adicionamos timeout
      retries: 5    # <-- CORREÇÃO: Adicionamos retries
      start_period: 30s # <-- CORREÇÃO: Adicionamos start_period

  analysis_service:
    build: ./backend/analysis_service
    container_name: analysis_service
    restart: always
    depends_on:
      auth_service: # <-- CORREÇÃO: Espera os serviços estarem saudáveis
        condition: service_healthy
      billing_service:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@postgres_db:5432/analysis_db # <-- CORREÇÃO: Usando a variável de senha
      - PORT=3000
      - SYSTEM_EMAIL=system@internal.service
      - SYSTEM_PASSWORD=${SYSTEM_PASSWORD}
      - BILLING_SERVICE_URL=http://billing_service:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"] # <-- CORREÇÃO: Usando curl e um endpoint /health
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 20s

  frontend:
    build: ./frontend
    container_name: frontend
    restart: always

  api_gateway:
    # CORREÇÃO: Agora ele constrói a partir da pasta nginx
    build: ./nginx
    container_name: api_gateway
    restart: always
    ports:
      - "8080:80"
    depends_on:
      auth_service:
        condition: service_healthy
      billing_service:
        condition: service_healthy
      analysis_service:
        condition: service_healthy
      frontend:
        condition: service_started
    environment:
      AUTH_SERVICE_HOST: auth_service
      AUTH_SERVICE_PORT: 8080
      BILLING_SERVICE_HOST: billing_service
      BILLING_SERVICE_PORT: 8080
      ANALYSIS_SERVICE_HOST: analysis_service
      ANALYSIS_SERVICE_PORT: 3000
      FRONTEND_HOST: frontend
      FRONTEND_PORT: 80

volumes:
  postgres_data:
