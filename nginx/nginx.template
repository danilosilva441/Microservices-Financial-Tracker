# nginx.template (SOLUÇÃO COMPLETA)

# --- Definição dos Endereços dos Serviços ---
upstream auth_service {
    server ${AUTH_SERVICE_HOST}:${AUTH_SERVICE_PORT};
}

upstream billing_service {
    server ${BILLING_SERVICE_HOST}:${BILLING_SERVICE_PORT};
}

upstream analysis_service {
    server ${ANALYSIS_SERVICE_HOST}:${ANALYSIS_SERVICE_PORT};
}

# --- CORREÇÃO: Dois upstreams para frontend ---
# 1. Upstream interno para comunicação entre serviços
upstream frontend_internal {
    server ${FRONTEND_HOST}:${FRONTEND_PORT};
}

# 2. Upstream externo para fallback (opcional)
upstream frontend_external {
    server frontend-production-47982.up.railway.app:443;
}

server {
    listen ${PORT};
    listen [::]:${PORT};
    server_name _;

    # --- Configurações de CORS e Headers Gerais ---
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # --- Health Check ---
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "healthy\n";
    }

    # --- ROTA PARA A API (mantenha suas configurações) ---
    location /api/ {
        # Suas configurações CORS e roteamento da API...
        add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        
        if ($request_method = 'OPTIONS') {
            # ... suas configurações OPTIONS
            return 204;
        }

        # Seu roteamento da API...
        location /api/users {
            proxy_pass http://auth_service;
        }
        
        location /api/token {
            proxy_pass http://auth_service;
        }
        
        location /api/analysis {
            proxy_pass http://analysis_service;
        }
        
        proxy_pass http://billing_service;
    }

    # --- CORREÇÃO CRÍTICA: Rota para Frontend ---
    location / {
        # Tenta primeiro via HTTP interno com headers especiais
        proxy_pass http://frontend_internal;
        
        # HEADERS CRÍTICOS para evitar redirecionamento HTTPS
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port 443;
        proxy_set_header X-Forwarded-Scheme https;
        
        # Headers padrão
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # Se falhar, tenta via HTTPS externo (fallback)
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_intercept_errors on;
        error_page 502 503 504 = @frontend_fallback;
    }

    # Fallback para HTTPS externo se o interno falhar
    location @frontend_fallback {
        proxy_pass https://frontend_external;
        proxy_set_header Host frontend-production-47982.up.railway.app;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_ssl_server_name on;
        proxy_ssl_verify off;
    }
}