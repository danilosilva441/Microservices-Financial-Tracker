# nginx/nginx.template (VERSÃO CORRIGIDA)

# --- Definição dos Endereços dos Serviços ---
upstream auth_service {
    server ${AUTH_SERVICE_HOST}:${AUTH_SERVICE_PORT};
}

upstream billing_service {
    server ${BILLING_SERVICE_HOST}:${BILLING_SERVICE_PORT};
}

upstream analysis_service {
    server ${ANALYSIS_SERVICE_HOST}:${ANALYSIS_SERVICE_PORT};
}

upstream frontend {
    server ${FRONTEND_HOST}:${FRONTEND_PORT};
}

server {
    listen ${PORT};
    listen [::]:${PORT};
    server_name _;

    # --- HEALTH CHECK ---
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # --- ROTA PARA A API (funciona mesmo sem frontend) ---
    location /api/ {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Roteamento da API (mantenha suas regras)
        location /api/users/ {
            proxy_pass http://auth_service/;
        }
        
        location /api/token/ {
            proxy_pass http://auth_service/;
        }
        
        location /api/admin/promote-to-admin {
            proxy_pass http://auth_service;
        }
        
        location /api/analysis/ {
            proxy_pass http://analysis_service/;
        }
        
        proxy_pass http://billing_service/;
    }

    # --- FALLBACK QUANDO FRONTEND ESTIVER OFFLINE ---
    location / {
        # Se o frontend não estiver disponível, mostra página informativa
        if ($upstream_addr ~* "failed") {
            return 503 "Frontend service is temporarily unavailable. API routes are working.";
        }
        
        proxy_pass http://frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }
}