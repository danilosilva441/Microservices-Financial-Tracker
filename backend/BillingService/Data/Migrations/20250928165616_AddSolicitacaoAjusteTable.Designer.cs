// <auto-generated />
using System;
using BillingService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BillingService.Data.Migrations
{
    [DbContext(typeof(BillingDbContext))]
    [Migration("20250928165616_AddSolicitacaoAjusteTable")]
    partial class AddSolicitacaoAjusteTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BillingService.Models.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiaVencimentoBoleto")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("BillingService.Models.Fatura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AnoReferencia")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("uuid");

                    b.Property<int>("MesReferencia")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Faturas");
                });

            modelBuilder.Entity("BillingService.Models.Faturamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("boolean");

                    b.Property<string>("Moeda")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperacaoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OperacaoId");

                    b.ToTable("Faturamentos");
                });

            modelBuilder.Entity("BillingService.Models.Mensalista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CPF")
                        .HasColumnType("text");

                    b.Property<Guid?>("EmpresaId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperacaoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ValorMensalidade")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("OperacaoId");

                    b.ToTable("Mensalistas");
                });

            modelBuilder.Entity("BillingService.Models.Meta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Ano")
                        .HasColumnType("integer");

                    b.Property<int>("Mes")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ValorAlvo")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Metas");
                });

            modelBuilder.Entity("BillingService.Models.Operacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<string>("Endereco")
                        .HasColumnType("text");

                    b.Property<bool>("IsAtiva")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MetaMensal")
                        .HasColumnType("numeric");

                    b.Property<string>("Moeda")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("ProjecaoFaturamento")
                        .HasColumnType("numeric");

                    b.Property<bool>("TemMensalistas")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Operacoes");
                });

            modelBuilder.Entity("BillingService.Models.SolicitacaoAjuste", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AprovadorId")
                        .HasColumnType("uuid");

                    b.Property<string>("DadosAntigos")
                        .HasColumnType("text");

                    b.Property<string>("DadosNovos")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataRevisao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FaturamentoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SolicitanteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FaturamentoId");

                    b.ToTable("SolicitacoesAjuste");
                });

            modelBuilder.Entity("BillingService.Models.UsuarioOperacao", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OperacaoId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "OperacaoId");

                    b.HasIndex("OperacaoId");

                    b.ToTable("UsuarioOperacoes");
                });

            modelBuilder.Entity("BillingService.Models.Fatura", b =>
                {
                    b.HasOne("BillingService.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("BillingService.Models.Faturamento", b =>
                {
                    b.HasOne("BillingService.Models.Operacao", "Operacao")
                        .WithMany("Faturamentos")
                        .HasForeignKey("OperacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operacao");
                });

            modelBuilder.Entity("BillingService.Models.Mensalista", b =>
                {
                    b.HasOne("BillingService.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");

                    b.HasOne("BillingService.Models.Operacao", "Operacao")
                        .WithMany()
                        .HasForeignKey("OperacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Operacao");
                });

            modelBuilder.Entity("BillingService.Models.SolicitacaoAjuste", b =>
                {
                    b.HasOne("BillingService.Models.Faturamento", "Faturamento")
                        .WithMany()
                        .HasForeignKey("FaturamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faturamento");
                });

            modelBuilder.Entity("BillingService.Models.UsuarioOperacao", b =>
                {
                    b.HasOne("BillingService.Models.Operacao", "Operacao")
                        .WithMany()
                        .HasForeignKey("OperacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operacao");
                });

            modelBuilder.Entity("BillingService.Models.Operacao", b =>
                {
                    b.Navigation("Faturamentos");
                });
#pragma warning restore 612, 618
        }
    }
}
